/// Gaia 汇编器核心类型定义

interface types {
    /// 目标平台
    enum target {
        /// .NET Common Language Runtime
        clr,
        /// Java Virtual Machine
        jvm,
        /// Windows Portable Executable
        pe,
        /// WebAssembly System Interface
        wasi,
    }

    /// 诊断级别
    enum diagnostic-level {
        /// 错误
        error,
        /// 警告
        warning,
        /// 信息
        info,
        /// 提示
        hint,
    }

    /// 源代码位置
    record source-location {
        /// 文件名
        file: string,
        /// 行号（从1开始）
        line: u32,
        /// 列号（从1开始）
        column: u32,
        /// 字符偏移量
        offset: u32,
    }

    /// 源代码范围
    record source-range {
        /// 开始位置
        start: source-location,
        /// 结束位置
        end: source-location,
    }

    /// 诊断信息
    record diagnostic {
        /// 诊断级别
        level: diagnostic-level,
        /// 诊断消息
        message: string,
        /// 错误代码
        code: option<string>,
        /// 源代码位置
        location: option<source-range>,
    }

    /// 汇编结果
    record assembly-result {
        /// 生成的字节码
        bytecode: list<u8>,
        /// 字节码格式描述
        format: string,
        /// 调试信息
        debug-info: option<list<u8>>,
        /// 符号表
        symbols: option<list<u8>>,
        /// 诊断信息
        diagnostics: list<diagnostic>,
    }

    /// 汇编操作结果
    variant assembly-operation-result {
        /// 成功
        ok(assembly-result),
        /// 失败
        err(list<diagnostic>),
    }

    /// 指令类型
    enum instruction-type {
        /// 加载指令
        load,
        /// 存储指令
        store,
        /// 算术指令
        arithmetic,
        /// 逻辑指令
        logical,
        /// 比较指令
        comparison,
        /// 控制流指令
        control-flow,
        /// 函数调用指令
        call,
        /// 其他指令
        other,
    }

    /// 数据类型
    enum data-type {
        /// 32位整数
        %i32,
        /// 64位整数
        %i64,
        /// 32位浮点数
        %f32,
        /// 64位浮点数
        %f64,
        /// 布尔值
        %bool,
        /// 字符串
        %string,
        /// 无返回值
        %void,
    }

    /// 指令元数据
    record instruction-metadata {
        /// 指令类型
        instruction-type: instruction-type,
        /// 操作数类型
        operand-types: list<data-type>,
        /// 指令描述
        description: string,
        /// 支持的目标平台
        supported-targets: list<target>,
    }

    /// 程序元数据
    record program-metadata {
        /// 程序名称
        name: string,
        /// 版本号
        version: string,
        /// 作者
        author: option<string>,
        /// 描述
        description: option<string>,
        /// 入口点
        entry-point: option<string>,
        /// 依赖项
        dependencies: list<string>,
    }

    /// 符号信息
    record symbol-info {
        /// 符号名称
        name: string,
        /// 符号类型
        symbol-type: symbol-type,
        /// 数据类型
        data-type: option<data-type>,
        /// 地址
        address: option<u64>,
        /// 大小
        size: option<u64>,
        /// 可见性
        visibility: visibility,
        /// 源代码位置
        location: option<source-location>,
    }

    /// 符号类型
    enum symbol-type {
        /// 函数
        function,
        /// 变量
        variable,
        /// 常量
        constant,
        /// 标签
        label,
    }

    /// 可见性
    enum visibility {
        /// 公开
        public,
        /// 私有
        private,
        /// 内部
        internal,
    }

    /// 平台信息
    record platform-info {
        /// 平台名称
        name: string,
        /// 版本
        version: string,
        /// 架构
        architecture: string,
        /// 指针大小（位）
        pointer-size: u32,
        /// 支持的特性
        supported-features: list<string>,
    }

    /// AST 节点类型
    enum ast-node-type {
        /// 程序根节点
        program,
        /// 函数定义
        function-def,
        /// 变量声明
        variable-decl,
        /// 指令
        instruction,
        /// 表达式
        expression,
        /// 字面量
        literal,
        /// 标识符
        identifier,
    }

    /// Gaia 描述符 - 包含生成最终可执行文件所需的所有信息
    record gaia-descriptor {
        /// 程序元数据
        metadata: program-metadata,
        /// 指令序列
        instructions: list<instruction-entry>,
        /// 符号表
        symbols: list<symbol-info>,
        /// 控制流图（可选）
        control-flow: option<control-flow-graph>,
        /// 数据段
        data-sections: list<data-section>,
        /// 重定位信息
        relocations: list<relocation-entry>,
        /// 调试信息（可选）
        debug-info: option<debug-info>,
    }

    /// 指令条目
    record instruction-entry {
        /// 指令
        instruction: instruction,
        /// 源代码位置
        location: option<source-location>,
        /// 注释
        comment: option<string>,
    }

    /// 类型安全的指令定义
    variant instruction {
        /// 算术指令
        arithmetic(arithmetic-instruction),
        /// 内存指令
        memory(memory-instruction),
        /// 控制流指令
        control-flow(control-flow-instruction),
        /// 比较指令
        comparison(comparison-instruction),
        /// 转换指令
        conversion(conversion-instruction),
        /// 函数调用指令
        call(call-instruction),
        /// 系统指令
        system(system-instruction),
    }

    /// 算术指令
    variant arithmetic-instruction {
        /// 加法
        add(binary-operand),
        /// 减法
        sub(binary-operand),
        /// 乘法
        mul(binary-operand),
        /// 除法
        div(binary-operand),
        /// 取模
        rem(binary-operand),
        /// 按位与
        and(binary-operand),
        /// 按位或
        or(binary-operand),
        /// 按位异或
        xor(binary-operand),
        /// 左移
        shl(binary-operand),
        /// 右移
        shr(binary-operand),
        /// 取反
        not(unary-operand),
        /// 取负
        neg(unary-operand),
    }

    /// 内存指令
    variant memory-instruction {
        /// 加载
        load(load-operand),
        /// 存储
        store(store-operand),
        /// 分配
        alloc(alloc-operand),
        /// 释放
        free(operand),
    }

    /// 控制流指令
    variant control-flow-instruction {
        /// 无条件跳转
        jump(jump-operand),
        /// 条件跳转
        branch(branch-operand),
        /// 返回
        return(option<operand>),
        /// 中断
        break,
        /// 继续
        continue,
    }

    /// 比较指令
    variant comparison-instruction {
        /// 等于
        eq(binary-operand),
        /// 不等于
        ne(binary-operand),
        /// 小于
        lt(binary-operand),
        /// 小于等于
        le(binary-operand),
        /// 大于
        gt(binary-operand),
        /// 大于等于
        ge(binary-operand),
    }

    /// 转换指令
    variant conversion-instruction {
        /// 类型转换
        cast(cast-operand),
        /// 零扩展
        zext(extend-operand),
        /// 符号扩展
        sext(extend-operand),
        /// 截断
        trunc(trunc-operand),
    }

    /// 函数调用指令
    variant call-instruction {
        /// 直接调用
        direct(direct-call-operand),
        /// 间接调用
        indirect(indirect-call-operand),
    }

    /// 系统指令
    variant system-instruction {
        /// 系统调用
        syscall(syscall-operand),
        /// 内联汇编
        inline-asm(inline-asm-operand),
        /// 内存屏障
        memory-barrier,
        /// 原子操作
        atomic(atomic-operand),
    }

    /// 控制流图
    record control-flow-graph {
        /// 基本块
        blocks: list<basic-block>,
        /// 边
        edges: list<control-flow-edge>,
    }

    /// 基本块
    record basic-block {
        /// 块ID
        id: string,
        /// 指令
        instructions: list<instruction-entry>,
        /// 标签
        label: option<string>,
    }

    /// 控制流边
    record control-flow-edge {
        /// 源块ID
        %from: string,
        /// 目标块ID
        to: string,
        /// 边类型
        edge-type: edge-type,
    }

    /// 边类型
    enum edge-type {
        /// 顺序执行
        sequential,
        /// 条件跳转
        conditional,
        /// 无条件跳转
        unconditional,
        /// 函数调用
        call,
        /// 函数返回
        return,
    }

    /// 汇编配置
    record assemble-config {
        /// 目标平台
        target: target,
        /// 目标架构
        architecture: option<string>,
        /// 是否生成调试信息
        debug: bool,
        /// 输出格式
        output-format: option<string>,
        /// 符号表选项
        symbol-table: bool,
        /// 重定位信息
        relocations: bool,
        /// 自定义选项
        custom-options: list<tuple<string, string>>,
    }

    /// 反汇编配置
    record disassemble-config {
        /// 目标平台
        target: target,
        /// 目标架构
        architecture: option<string>,
        /// 是否包含地址
        include-addresses: bool,
        /// 是否包含字节码
        include-bytecode: bool,
        /// 是否尝试恢复符号
        recover-symbols: bool,
        /// 输出格式
        output-format: option<string>,
        /// 自定义选项
        custom-options: list<tuple<string, string>>,
    }

    /// 反汇编结果
    variant disassemble-result {
        /// 成功
        ok(gaia-descriptor),
        /// 失败
        err(list<diagnostic>),
    }

    /// 操作数
    variant operand {
        /// 寄存器
        register(register),
        /// 立即数
        immediate(immediate-value),
        /// 内存地址
        memory(memory-address),
        /// 符号引用
        symbol(string),
        /// 标签
        label(string),
    }

    /// 二元操作数
    record binary-operand {
        /// 左操作数
        left: operand,
        /// 右操作数
        right: operand,
        /// 结果存储位置
        %result: operand,
    }

    /// 一元操作数
    record unary-operand {
        /// 源操作数
        source: operand,
        /// 结果存储位置
        %result: operand,
    }

    /// 加载操作数
    record load-operand {
        /// 源地址
        source: memory-address,
        /// 目标寄存器
        target: register,
        /// 数据类型
        data-type: data-type,
    }

    /// 存储操作数
    record store-operand {
        /// 源寄存器
        source: register,
        /// 目标地址
        target: memory-address,
        /// 数据类型
        data-type: data-type,
    }

    /// 分配操作数
    record alloc-operand {
        /// 分配大小
        size: operand,
        /// 对齐要求
        alignment: option<u32>,
        /// 结果存储位置
        %result: register,
    }

    /// 跳转操作数
    record jump-operand {
        /// 目标标签
        target: string,
    }

    /// 分支操作数
    record branch-operand {
        /// 条件
        condition: operand,
        /// 真分支目标
        true-target: string,
        /// 假分支目标
        false-target: string,
    }

    /// 类型转换操作数
    record cast-operand {
        /// 源操作数
        source: operand,
        /// 源类型
        from-type: data-type,
        /// 目标类型
        to-type: data-type,
        /// 结果存储位置
        %result: operand,
    }

    /// 扩展操作数
    record extend-operand {
        /// 源操作数
        source: operand,
        /// 源位宽
        from-bits: u32,
        /// 目标位宽
        to-bits: u32,
        /// 结果存储位置
        %result: operand,
    }

    /// 截断操作数
    record trunc-operand {
        /// 源操作数
        source: operand,
        /// 源位宽
        from-bits: u32,
        /// 目标位宽
        to-bits: u32,
        /// 结果存储位置
        %result: operand,
    }

    /// 直接调用操作数
    record direct-call-operand {
        /// 函数名
        function: string,
        /// 参数
        arguments: list<operand>,
        /// 返回值存储位置
        %result: option<operand>,
    }

    /// 间接调用操作数
    record indirect-call-operand {
        /// 函数指针
        function-pointer: operand,
        /// 参数
        arguments: list<operand>,
        /// 返回值存储位置
        %result: option<operand>,
    }

    /// 系统调用操作数
    record syscall-operand {
        /// 系统调用号
        number: operand,
        /// 参数
        arguments: list<operand>,
        /// 返回值存储位置
        %result: option<operand>,
    }

    /// 内联汇编操作数
    record inline-asm-operand {
        /// 汇编代码
        assembly: string,
        /// 输入操作数
        inputs: list<operand>,
        /// 输出操作数
        outputs: list<operand>,
        /// 破坏的寄存器
        clobbers: list<string>,
    }

    /// 原子操作数
    record atomic-operand {
        /// 原子操作类型
        operation: atomic-operation,
        /// 内存地址
        address: memory-address,
        /// 操作数
        operands: list<operand>,
        /// 内存序
        memory-order: memory-order,
    }

    /// 寄存器
    record register {
        /// 寄存器名称
        name: string,
        /// 寄存器类型
        register-type: register-type,
        /// 位宽
        width: u32,
    }

    /// 立即数值
    variant immediate-value {
        /// 整数
        integer(s64),
        /// 浮点数
        float(f64),
        /// 字符串
        %string(string),
        /// 布尔值
        boolean(bool),
    }

    /// 内存地址
    record memory-address {
        /// 基址寄存器
        base: option<register>,
        /// 索引寄存器
        index: option<register>,
        /// 比例因子
        scale: option<u32>,
        /// 偏移量
        offset: s64,
    }

    /// 寄存器类型
    enum register-type {
        /// 通用寄存器
        general,
        /// 浮点寄存器
        floating-point,
        /// 向量寄存器
        vector,
        /// 特殊寄存器
        special,
    }

    /// 原子操作类型
    enum atomic-operation {
        /// 加载
        load,
        /// 存储
        store,
        /// 交换
        exchange,
        /// 比较并交换
        compare-exchange,
        /// 加法
        add,
        /// 减法
        sub,
        /// 按位与
        and,
        /// 按位或
        or,
        /// 按位异或
        xor,
    }

    /// 内存序
    enum memory-order {
        /// 松散
        relaxed,
        /// 获取
        acquire,
        /// 释放
        release,
        /// 获取-释放
        acquire-release,
        /// 顺序一致
        sequential-consistent,
    }

    /// 数据段
    record data-section {
        /// 段名称
        name: string,
        /// 段类型
        section-type: section-type,
        /// 数据
        data: list<u8>,
        /// 对齐要求
        alignment: u32,
        /// 权限
        permissions: section-permissions,
    }

    /// 段类型
    enum section-type {
        /// 代码段
        code,
        /// 数据段
        data,
        /// 只读数据段
        rodata,
        /// 未初始化数据段
        bss,
        /// 调试信息段
        debug,
    }

    /// 段权限
    record section-permissions {
        /// 可读
        read: bool,
        /// 可写
        write: bool,
        /// 可执行
        execute: bool,
    }

    /// 重定位条目
    record relocation-entry {
        /// 重定位类型
        relocation-type: relocation-type,
        /// 偏移量
        offset: u64,
        /// 符号名称
        symbol: string,
        /// 附加值
        addend: s64,
    }

    /// 重定位类型
    enum relocation-type {
        /// 绝对地址
        absolute,
        /// 相对地址
        relative,
        /// 程序计数器相对
        pc-relative,
        /// 全局偏移表
        got,
        /// 过程链接表
        plt,
    }

    /// 调试信息
    record debug-info {
        /// 源文件映射
        source-files: list<source-file-info>,
        /// 行号信息
        line-numbers: list<line-number-info>,
        /// 变量信息
        variables: list<variable-debug-info>,
        /// 函数信息
        functions: list<function-debug-info>,
    }

    /// 源文件信息
    record source-file-info {
        /// 文件ID
        id: u32,
        /// 文件路径
        path: string,
        /// 文件哈希
        hash: option<string>,
    }

    /// 行号信息
    record line-number-info {
        /// 地址
        address: u64,
        /// 文件ID
        file-id: u32,
        /// 行号
        line: u32,
        /// 列号
        column: u32,
    }

    /// 变量调试信息
    record variable-debug-info {
        /// 变量名
        name: string,
        /// 数据类型
        data-type: data-type,
        /// 地址或寄存器
        location: debug-location,
        /// 作用域
        scope: debug-scope,
    }

    /// 函数调试信息
    record function-debug-info {
        /// 函数名
        name: string,
        /// 起始地址
        start-address: u64,
        /// 结束地址
        end-address: u64,
        /// 参数信息
        parameters: list<variable-debug-info>,
        /// 局部变量信息
        locals: list<variable-debug-info>,
    }

    /// 调试位置
    variant debug-location {
        /// 内存地址
        memory(u64),
        /// 寄存器
        register(string),
        /// 栈偏移
        stack-offset(s64),
    }

    /// 调试作用域
    record debug-scope {
        /// 起始地址
        start-address: u64,
        /// 结束地址
        end-address: u64,
        /// 父作用域
        parent: option<u32>,
    }

    /// 复杂度分析结果
    record complexity-analysis {
        /// 指令数量
        instruction-count: u32,
        /// 函数数量
        function-count: u32,
        /// 循环复杂度
        cyclomatic-complexity: u32,
        /// 最大嵌套深度
        max-nesting-depth: u32,
        /// 内存使用估计（字节）
        estimated-memory-usage: u64,
    }

    /// 依赖关系图
    record dependency-graph {
        /// 节点（符号）
        nodes: list<dependency-node>,
        /// 边（依赖关系）
        edges: list<dependency-edge>,
    }

    /// 依赖节点
    record dependency-node {
        /// 节点ID
        id: string,
        /// 符号名称
        symbol: string,
        /// 节点类型
        node-type: dependency-node-type,
    }

    /// 依赖边
    record dependency-edge {
        /// 源节点ID
        %from: string,
        /// 目标节点ID
        to: string,
        /// 依赖类型
        dependency-type: dependency-type,
    }

    /// 依赖节点类型
    enum dependency-node-type {
        /// 函数
        function,
        /// 变量
        variable,
        /// 常量
        constant,
        /// 类型
        %type,
    }

    /// 依赖类型
    enum dependency-type {
        /// 调用依赖
        call,
        /// 数据依赖
        data,
        /// 类型依赖
        %type,
        /// 控制依赖
        control,
    }

    /// 目标架构（与 target 相同，用于向后兼容）
    type target-arch = target;

    /// 代码生成选项
    record code-generation-options {
        /// 是否包含注释
        include-comments: bool,
        /// 是否包含调试信息
        debug-info: bool,
        /// 优化级别 (0-3)
        optimization-level: u32,
        /// 是否包含错误处理
        include-error-handling: bool,
        /// 是否生成性能基准
        generate-benchmarks: bool,
        /// 随机种子（用于可重现的代码生成）
        random-seed: option<u64>,
    }


    record format-options {
        /// 缩进空格数
        indent-spaces: u32,
        /// 最大行长度
        max-line-length: u32,
        /// 是否使用制表符
        use-tabs: bool,
    }
}